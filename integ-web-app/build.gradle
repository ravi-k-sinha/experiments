import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote
import groovy.sql.Sql

def cargoVersion = '1.4.18'

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.bmuschko.cargo-base'

if (!project.hasProperty('environment')) {
    ant.echo "Using 'dev' as no environment specified. A specific environment can be specified as -Penvironment=dev/qa/prod/local"
    ant.echo "Among all members, local-env.gradle should be ignored in source control system."
    ext.environment = 'dev'

    println project(':integ-util').file('integ-util.iml')
}

def envScript = file("$environment-env.gradle")

if (!envScript.exists()) {
    throw new GradleException("Unknown Environment: $environment");
}

apply from: envScript

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.1.1'
        classpath 'mysql:mysql-connector-java:5.1.38'
    }
}

repositories {
    jcenter()
}

configurations {
    mysqldriver
}

cargo {

    containerId = 'wildfly9x'

    remote {
        hostname = 'localhost'
        username = 'admin'
        password = 'admin'
    }

    local {
        jvmArgs = '-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n'
        //homeDir = file('C:\\User-Area\\PF\\ent\\servers\\wildfly-9.0.1.Final')
    }
}

jettyRun  {
    reload = "automatic"
    scanIntervalSeconds = 5
}

dependencies {
    compile project(':integ-util')
    compile project(':integ-domain-1')
    compile 'org.apache.commons:commons-lang3:3.4'
    providedCompile 'javax:javaee-api:7.0'

    cargo "org.codehaus.cargo:cargo-ant:${cargoVersion}"
    cargo "org.codehaus.cargo:cargo-core-uberjar:${cargoVersion}"
    cargo "org.codehaus.cargo:cargo-core-container-wildfly:${cargoVersion}"
    cargo 'org.wildfly:wildfly-controller-client:8.2.0.Final'

    mysqldriver 'mysql:mysql-connector-java:5.1.38'
}

def mysqlDb = [
        classpath: configurations.mysqldriver.asPath,
        driver: 'com.mysql.jdbc.Driver',
        url: 'jdbc:mysql://localhost:3306/expdb',
        user: 'root',
        password: 'admin'
]

task deployToLocalServer(
        type: CargoRedeployRemote,
        dependsOn: ['war']) {

    //println('deployToLocalServer')
}

task loadDriver() {

    doLast {
        URLClassLoader loader = GroovyObject.class.classLoader
        configurations.mysqldriver.each { File file ->
            loader.addURL(file.toURI().toURL())
        }
        println 'MySQL Driver Loaded...'
    }
}

/**
 * A sample task to connect database using Groovy SQl library
 */
task callDatabase(dependsOn: loadDriver) {

    doLast {
        println 'Connecting to database ...'
        def sql = Sql.newInstance('jdbc:mysql://localhost:3306/expdb', 'root', 'admin', 'com.mysql.jdbc.Driver')
        println '... connected'
        println 'Querying database tables ...'
        sql.eachRow('show tables') { row ->
            println row
        }
        sql.close()
        println '... ready'
    }
}

task emptyDatabase {
    doLast {
        ant.echo 'Starting to empty database ...'
        ant.sql(
                classpath: mysqlDb.classpath,
                driver: mysqlDb.driver,
                url: mysqlDb.url,
                userid: mysqlDb.user,
                password: mysqlDb.password,
                onerror: 'continue',
                print: true
        ) {
            transaction(src: 'src/scripts/db/emptyDb.sql')
        }
        ant.echo 'Database emptying completed ...'
    }
}

task populateDatabase {
    doLast {
        ant.echo 'Starting database population ...'
        ant.sql(
                classpath: mysqlDb.classpath,
                driver: mysqlDb.driver,
                url: mysqlDb.url,
                userid: mysqlDb.user,
                password: mysqlDb.password,
                onerror: 'continue',
                print: true
        ) {
            transaction(src: 'src/scripts/db/populateDb.sql')
        }
        ant.echo 'Database population completed ...'
    }
}

task renewDatabase(dependsOn: [emptyDatabase, populateDatabase]) {
}

populateDatabase.shouldRunAfter(emptyDatabase)